{"version":3,"sources":["components/home.js","components/Jobs.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","useState","name","setName","description","setDescription","salary","setSalary","show","setShow","handleClose","Navbar","bg","Container","Brand","href","Toggle","Nav","className","Badge","cUSDBalance","Collapse","Button","onClick","variant","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","target","value","placeholder","as","style","height","Footer","disabled","addJob","Jobs","Row","xs","md","jobs","map","job","Col","Card","Stack","direction","gap","index","jobName","Text","jobDescription","walletAddress","employer","removeJob","class","App","contract","setcontract","address","setAddress","kit","setKit","setcUSDBalance","setJobs","connectToWallet","a","window","celo","enable","web3","Web3","newKitFromWeb3","eth","getAccounts","accounts","user_address","defaultAccount","console","log","alert","getBalance","useCallback","getTotalBalance","balance","USDBalance","cUSD","shiftedBy","toFixed","Contract","jobBoard","getJobs","methods","getJobsLength","call","jobsLength","_jobs","Promise","resolve","reject","getJobposts","jobId","push","all","_jobName","_jobDescription","_salary","postJob","send","from","_index","removeJobPost","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e08d05d8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  FloatingLabel,\r\n  Nav,\r\n  Badge,\r\n  Container,\r\n  Navbar,\r\n} from \"react-bootstrap\";\r\n\r\nconst Home = (props) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [salary, setSalary] = useState(\"\");\r\n\r\n  const isFormFilled = () => name && description && salary;\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg=\"light\">\r\n        <Container>\r\n          <Navbar.Brand href=\"#home\">Celo - Job - Board</Navbar.Brand>\r\n          <Navbar.Toggle />\r\n          <Nav className=\"me-auto\">\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              Balance {props.cUSDBalance}cUSD\r\n            </Badge>\r\n          </Nav>\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <Button onClick={handleShow} variant=\"dark\">\r\n              <h5> Add a new Job </h5>\r\n            </Button>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>New Job</Modal.Title>\r\n        </Modal.Header>\r\n        <Form>\r\n          <Modal.Body>\r\n            <FloatingLabel\r\n              controlId=\"inputName\"\r\n              label=\"Employer name\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n                placeholder=\"Name\"\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputDescription\"\r\n              label=\"Job description\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"description\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputSalary\"\r\n              label=\"Salary per year\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                onChange={(e) => {\r\n                  setSalary(e.target.value);\r\n                }}\r\n                placeholder=\"salary\"\r\n              />\r\n            </FloatingLabel>\r\n\r\n          </Modal.Body>\r\n        </Form>\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"dark\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              props.addJob(name, description, salary);\r\n              handleClose();\r\n            }}\r\n          >\r\n            Add Job\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Card, Badge, Col, Stack, Row } from \"react-bootstrap\";\r\n\r\nexport const Jobs = (props) => {\r\n  return (\r\n    <Row xs={1} md={3} className=\"g-4\">\r\n      {props.jobs.map((job) => (\r\n        <Col key={job.index}>\r\n          <Card className=\"h-100\">\r\n            <Card.Header>\r\n              <Stack direction=\"horizontal\" gap={2}>\r\n                <Badge bg=\"secondary\" className=\"ms-auto\">\r\n                  {job.index} ID\r\n                </Badge>\r\n\r\n                <Badge bg=\"secondary\" className=\"ms-auto\">\r\n                  {job.salary}cUSD/year\r\n                </Badge>\r\n              </Stack>\r\n            </Card.Header>\r\n            <Card.Body className=\"d-flex  flex-column text-center\">\r\n            <Card.Title className=\"flex-grow-1\">\r\n                {job.jobName}\r\n              </Card.Title>\r\n              <Card.Text className=\"flex-grow-1\">\r\n                {job.jobDescription}\r\n              </Card.Text>\r\n\r\n         \r\n                {props.walletAddress === job.employer &&(\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => props.removeJob(job.index)}\r\n                    class=\"btn btn-dark mt-1\"\r\n                  >\r\n                    Remove Job\r\n                  </button>\r\n                  )}\r\n            \r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  );\r\n};\r\n","import \"./App.css\";\r\nimport Home from \"./components/home\";\r\nimport { Jobs } from \"./components/Jobs\";\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport { newKitFromWeb3 } from \"@celo/contractkit\";\r\nimport jobBoard from \"./contracts/jobBoard.abi.json\";\r\n\r\n\r\nconst ERC20_DECIMALS = 18;\r\nconst contractAddress = \"0x31375CB4f0e144E36F9de58C2085C0F0A0CF6627\";\r\n\r\n\r\nfunction App() {\r\n  const [contract, setcontract] = useState(null);\r\n  const [address, setAddress] = useState(null);\r\n  const [kit, setKit] = useState(null);\r\n  const [cUSDBalance, setcUSDBalance] = useState(0);\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n  const connectToWallet = async () => {\r\n    if (window.celo) {\r\n      try {\r\n        await window.celo.enable();\r\n        const web3 = new Web3(window.celo);\r\n        let kit = newKitFromWeb3(web3);\r\n\r\n        const accounts = await kit.web3.eth.getAccounts();\r\n        const user_address = accounts[0];\r\n        kit.defaultAccount = user_address;\r\n\r\n        await setAddress(user_address);\r\n        await setKit(kit);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    } else {\r\n      alert(\"Error Occurred\");\r\n    }\r\n  };\r\n\r\n  const getBalance = useCallback(async () => {\r\n    try {\r\n      const balance = await kit.getTotalBalance(address);\r\n      const USDBalance = balance.cUSD.shiftedBy(-ERC20_DECIMALS).toFixed(2);\r\n\r\n      const contract = new kit.web3.eth.Contract(jobBoard, contractAddress);\r\n      setcontract(contract);\r\n      setcUSDBalance(USDBalance);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [address, kit]);\r\n\r\n  const getJobs = useCallback(async () => {\r\n    const jobsLength = await contract.methods.getJobsLength().call();\r\n    const jobs = [];\r\n    for (let index = 0; index < jobsLength; index++) {\r\n      let _jobs = new Promise(async (resolve, reject) => {\r\n        let job = await contract.methods.getJobposts(index).call();\r\n\r\n        resolve({\r\n          index: index,\r\n          jobId: job[0],\r\n          employer: job[1],\r\n          jobName: job[2],\r\n          jobDescription: job[3],\r\n          salary: job[4],\r\n        });\r\n      });\r\n      jobs.push(_jobs);\r\n    }\r\n\r\n    const _jobs = await Promise.all(jobs);\r\n    setJobs(_jobs);\r\n  }, [contract]);\r\n\r\n  const addJob = async (_jobName, _jobDescription, _salary) => {\r\n    try {\r\n      await contract.methods\r\n        .postJob(_jobName, _jobDescription, _salary)\r\n        .send({ from: address });\r\n      getJobs();\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const removeJob = async (_index) => {\r\n    try {\r\n      await contract.methods\r\n        .removeJobPost(_index)\r\n        .send({ from: address });\r\n      getJobs();\r\n      getBalance();\r\n      alert(\"you have successfully removed the job\");\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    connectToWallet();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (kit && address) {\r\n      getBalance();\r\n    }\r\n  }, [kit, address, getBalance]);\r\n\r\n  useEffect(() => {\r\n    if (contract) {\r\n      getJobs();\r\n    }\r\n  }, [contract, getJobs]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Home cUSDBalance={cUSDBalance} addJob={addJob} />\r\n      <Jobs\r\n        jobs={jobs}\r\n        removeJob={removeJob}\r\n        walletAddress={address}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}